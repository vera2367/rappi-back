name: CI/CD Spring Boot + MySQL + Postman + Heroku (Gradle)

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: soylucas
          MYSQL_USER: root
          MYSQL_PASSWORD: soylucas
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: 🧾 Checkout code
        uses: actions/checkout@v3

      - name: ☕ Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: 🛠️ Build with Gradle (sin tests)
        run: ./gradlew build -x test

      - name: 🕐 Esperar que MySQL esté listo
        run: |
          until mysql -h 127.0.0.1 -u root -p${{ secrets.MYSQL_PASSWORD }} -e 'show databases'; do
            echo "Esperando MySQL..."
            sleep 5
          done

      - name: ▶️ Run Spring Boot app in background
        run: |
          nohup java -Dserver.port=8080 -jar build/libs/*.jar > output.log 2>&1 &
          echo $! > app.pid
          sleep 20

      - name: Verificar si Spring Boot está levantado
        run: |
          until curl -s http://localhost:8080/actuator/health; do
            echo "Esperando que la aplicación esté lista..."
            sleep 5
          done

      - name: 🧰 Setup Node.js (for Newman)
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: 📦 Install Newman
        run: npm install -g newman

      - name: 🧪 Run Postman tests
        run: |
          newman run postman2/MetodoPago Copy 2.postman_collection.json \
            --environment postman2/apirappi.postman_environment.json \
            --reporters cli,junit \
            --reporter-junit-export newman-report.xml

      - name: 🛑 Stop Spring Boot app
        run: |
          kill $(cat app.pid)

      - name: 📂 Upload JAR as artifact
        uses: actions/upload-artifact@v3.1.3

      - name: 🚀 Deploy to Heroku
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: akhileshns/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
          procfile: "Procfile"
